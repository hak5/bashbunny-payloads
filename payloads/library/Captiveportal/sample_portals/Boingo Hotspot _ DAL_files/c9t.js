// Generated by CoffeeScript 1.6.3
(function() {
  var C9Q, C9T, c9, enc, noop, typeIsArray;

  c9 = window.cloud9 || (window.cloud9 = {});

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  noop = function() {};

  window.console || (window.console = {
    log: noop,
    info: noop,
    error: noop,
    warn: noop
  });

  (function(c9) {
  c9.extend = function() {
        /* borrowed from jQuery */

        // copy reference to target object
        var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options, name, src, copy;

        // extend itself if only one argument is passed
        if ( length === i ) {
            target = this;
            --i;
        }

        for ( ; i < length; i++ ) {
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( name in options ) {
                    src = target[ name ];
                    copy = options[ name ];
                    // Prevent never-ending loop
                    if ( target === copy ) {
                        continue;
                    }
                    if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };
})(c9);

  /*!
  * domready (c) Dustin Diaz 2012 - License MIT
  */
!function (name, definition) {
  if(!c9[name]) { c9[name] = definition(); }
}('domready', function (ready) {

  var fns = [], fn, f = false
    , doc = document
    , testEl = doc.documentElement
    , hack = testEl.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , addEventListener = 'addEventListener'
    , onreadystatechange = 'onreadystatechange'
    , readyState = 'readyState'
    , loaded = /^loade|c/.test(doc[readyState])

  function flush(f) {
    loaded = 1
    while (f = fns.shift()) f()
  }

  doc[addEventListener] && doc[addEventListener](domContentLoaded, fn = function () {
    doc.removeEventListener(domContentLoaded, fn, f)
    flush()
  }, f)


  hack && doc.attachEvent(onreadystatechange, fn = function () {
    if (/^c/.test(doc[readyState])) {
      doc.detachEvent(onreadystatechange, fn)
      flush()
    }
  })

  return (ready = hack ?
    function (fn) {
      self != top ?
        loaded ? fn() : fns.push(fn) :
        function () {
          try {
            testEl.doScroll('left')
          } catch (e) {
            return setTimeout(function() { ready(fn) }, 50)
          }
          fn()
        }()
    } :
    function (fn) {
      loaded ? fn() : fns.push(fn)
    })
});

  enc = window.encodeURIComponent;

  c9.env = {
    tagHost: (document.location.host === 'nlocal.c9w.net' ? 'nlocal.c9w.net' : 'nimbus.c9w.net'),
    proto: document.location.protocol === 'https:' ? 'https:' : 'http:'
  };

  c9.urlEncodeNoNull = function(obj) {
    var k, res, subv, v, _i, _len;
    res = "";
    for (k in obj) {
      v = obj[k];
      if (v == null) {
        continue;
      }
      if (typeIsArray(v)) {
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          subv = v[_i];
          res += '&' + enc(k) + '=' + enc(subv);
        }
      } else {
        res += '&' + enc(k) + '=' + enc(v);
      }
    }
    return res.substring(1);
  };

  C9Q = (function() {
    function C9Q(parent) {
      this.parent = parent;
    }

    C9Q.prototype.push = function(fn) {
      return fn.call(this.parent);
    };

    return C9Q;

  })();

  c9.C9T = C9T = (function() {
    function C9T(q) {
      if (q == null) {
        q = [];
      }
      this.config = {
        venue: null,
        auth: 'preauth',
        subVenue: null,
        mac: null,
        lang: 'en-us',
        authUrl: null
      };
      this.no_iframe_units = [];
      this.q = new C9Q(this);
      this.initq = q;
      this.env = c9.env;
      this.reset();
    }

    C9T.prototype.reset = function() {
      this._serving = false;
      return this._units = {};
    };

    C9T.prototype.init = function() {
      var fn, _i, _len, _ref, _results;
      _ref = this.initq;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        _results.push(fn.call(this));
      }
      return _results;
    };

    C9T.prototype.serve = function() {
      return this._serving = true;
    };

    C9T.prototype.configure = function(config) {
      return this.config = c9.extend(this.config, config);
    };

    C9T.prototype.defineUnit = function(el, name, size) {
      if ((el == null) || (name == null) || (size == null)) {
        console.error("Missing required parameters.");
        return this;
      }
      if (!size.length === 2) {
        console.error("Invalid size parameter.");
        return this;
      }
      this._units[el] = {
        el: el,
        name: name,
        size: size,
        displayed: false
      };
      return this;
    };

    C9T.prototype.getUnit = function(el) {
      return this._units[el];
    };

    C9T.prototype.displayAllUnits = function() {
      var c9SyncReadyQ, parent;
      if (this.no_iframe_units.length < 1) {
        console.warn("No units to display have been pushed to stack.");
        return;
      }
      if (typeof c9init !== "undefined" && c9init !== null) {
        parent = this;
        c9SyncReadyQ = window.c9SyncReadyQ || (window.c9SyncReadyQ = []);
        return c9SyncReadyQ.push(function(adgroup_id) {
          return parent._displayUnitsNoIFrame();
        });
      } else {
        return this._displayUnitsNoIFrame();
      }
    };

    C9T.prototype.displayUnit = function(el) {
      var c9SyncReadyQ, parent, unit;
      unit = this.getUnit(el);
      if (unit == null) {
        console.warn("Ad Unit for " + el + " not found.");
        return;
      }
      c9SyncReadyQ = window.c9SyncReadyQ || (window.c9SyncReadyQ = []);
      parent = this;
      if (parent.config.collapse) {
        return parent.no_iframe_units.push(unit);
      } else {
        if (typeof c9init !== "undefined" && c9init !== null) {
          return c9SyncReadyQ.push(function(adgroup_id) {
            return parent._displayUnitRemoteIFrame(unit);
          });
        } else {
          return parent._displayUnitRemoteIFrame(unit);
        }
      }
    };

    C9T.prototype.getUnitDomId = function(unit) {
      return "c9au__" + unit.name;
    };

    C9T.prototype._getUnitsRemoteNoIFrameSrc = function() {
      var els, names, query, unit;
      names = (function() {
        var _i, _len, _ref, _results;
        _ref = this.no_iframe_units;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          unit = _ref[_i];
          _results.push(unit.name);
        }
        return _results;
      }).call(this);
      els = (function() {
        var _i, _len, _ref, _results;
        _ref = this.no_iframe_units;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          unit = _ref[_i];
          _results.push(unit.el);
        }
        return _results;
      }).call(this);
      if (typeof adgroup_id === "undefined" || adgroup_id === null) {
        adgroup_id = '';
      }
      query = c9.urlEncodeNoNull({
        v: this.config.venue,
        sv: this.config.subVenue,
        auth: this.config.auth,
        m: this.config.mac,
        lang: this.config.lang,
        authu: this.config.authUrl,
        sz: unit.size[0] + "x" + unit.size[1],
        unn: names,
        une: els,
        adgrp: adgroup_id
      });
      return "" + this.env.proto + "//" + this.env.tagHost + "/wifi/tg/?" + query;
    };

    C9T.prototype._getUnitRemoteIFrameSrc = function(unit) {
      var query;
      if (typeof adgroup_id === "undefined" || adgroup_id === null) {
        adgroup_id = '';
      }
      query = c9.urlEncodeNoNull({
        v: this.config.venue,
        sv: this.config.subVenue,
        auth: this.config.auth,
        m: this.config.mac,
        lang: this.config.lang,
        authu: this.config.authUrl,
        sz: unit.size[0] + "x" + unit.size[1],
        unn: unit.name,
        une: unit.el,
        adgrp: adgroup_id
      });
      return "" + this.env.proto + "//" + this.env.tagHost + "/wifi/tg/?" + query;
    };

    C9T.prototype._displayUnitsNoIFrame = function() {
      var all_units, config,
        _this = this;
      config = this.config;
      all_units = this.no_iframe_units;
      return c9.domready(function() {
        var callback_name, script;
        script = document.createElement('script');
        script.type = 'text/javascript';
        callback_name = "c9appendcb" + Math.ceil(Math.random() * 1000000);
        script.src = _this._getUnitsRemoteNoIFrameSrc() + "&callback=" + callback_name;
        window[callback_name] = function(data) {
          var c9unit_name, child, div, el, ns, s, scripts, u, unit_info, unit_name, _i, _j, _len, _len1, _results;
          child = document.createElement("div");
          child.innerHTML = data.scripts;
          scripts = child.getElementsByTagName("script");
          for (_i = 0, _len = scripts.length; _i < _len; _i++) {
            s = scripts[_i];
            ns = document.createElement("script");
            ns.text = s.text;
            document.body.appendChild(ns);
          }
          _results = [];
          for (_j = 0, _len1 = all_units.length; _j < _len1; _j++) {
            u = all_units[_j];
            unit_name = 'wifi__' + config.venue + '__' + u.name;
            unit_info = data.units[unit_name];
            div = document.createElement('div');
            div.id = unit_info.divid;
            div.style.width = unit_info.width + 'px';
            div.style.height = unit_info.height + 'px';
            el = document.getElementById(u.el);
            el.insertBefore(div, el.firstChild);
            c9unit_name = u.el;
            _results.push(c9unit_name && googletag.cmd.push((function() {
              return googletag.display(unit_info.divid);
            })));
          }
          return _results;
        };
        document.body.appendChild(script);
      });
    };

    C9T.prototype._displayUnitRemoteIFrame = function(unit) {
      var _this = this;
      if (unit.displayed) {
        return;
      }
      unit.displayed = true;
      return c9.domready(function() {
        var el, ifr;
        el = document.getElementById(unit.el);
        if (el == null) {
          console.warn("Cannot display ad unit: " + ("container element with id '" + unit.el + "' does not exist."));
        }
        ifr = document.createElement('iframe');
        ifr.id = _this.getUnitDomId(unit);
        ifr.width = unit.size[0];
        ifr.height = unit.size[1];
        ifr.frameBorder = 0;
        ifr.marginWidth = 0;
        ifr.marginHeight = 0;
        ifr.scrolling = 'no';
        if (ifr.allowTransparency != null) {
          ifr.allowTransparency = true;
        }
        if (ifr.attachEvent != null) {
          ifr.style.visibility = 'hidden';
          ifr.attachEvent('onload', function() {
            return ifr.style.visibility = 'visible';
          });
        } else if (ifr.addEventListener != null) {
          ifr.style.visibility = 'hidden';
          ifr.addEventListener('load', function() {
            return ifr.style.visibility = 'visible';
          });
        }
        ifr.src = _this._getUnitRemoteIFrameSrc(unit);
        return el.appendChild(ifr);
      });
    };

    return C9T;

  })();

  window.c9tag = new c9.C9T((window.c9tag && window.c9tag.q) || []);

  window.c9tag.init();

}).call(this);
